# models ðŸš€ AGPL-3.0 License - https://models.com/license

import torch

from models.models.yolo.detect import DetectionValidator
from models.utils import ops

__all__ = ["NASValidator"]


class NASValidator(DetectionValidator):
    """
    models YOLO NAS Validator for object detection.

    Extends `DetectionValidator` from the models models package and is designed to post-process the raw predictions
    generated by YOLO NAS models. It performs non-maximum suppression to remove overlapping and low-confidence boxes,
    ultimately producing the final detections.

    Attributes:
        args (Namespace): Namespace containing various configurations for post-processing, such as confidence and IoU.
        lb (torch.Tensor): Optional tensor for multilabel NMS.

    Example:
        ```python
        from models import NAS

        model = NAS("yolo_nas_s")
        validator = model.validator
        # Assumes that raw_preds are available
        final_preds = validator.postprocess(raw_preds)
        ```

    Note:
        This class is generally not instantiated directly but is used internally within the `NAS` class.
    """

    def postprocess(self, preds_in):
        """Apply Non-maximum suppression to prediction outputs."""
        boxes = ops.xyxy2xywh(preds_in[0][0])
        preds = torch.cat((boxes, preds_in[0][1]), -1).permute(0, 2, 1)
        return super().postprocess(
            preds,
            max_time_img=0.5,
        )
